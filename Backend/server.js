const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const cors = require('cors');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const path = require('path');
const fs = require('fs');

const JWT_SECRET = 'your_jwt_secret_key';

const app = express();
app.use(bodyParser.json());
app.use(cors());

mongoose.connect('mongodb+srv://rachitsrirkst:L6ZY91ErF6Cji1JP@cluster0.oa0oqlk.mongodb.net', {
   
});

const userSchema = new mongoose.Schema({
    email: { type: String, unique: true, required: true },
    password: { type: String, required: true },
    username: { type: String, unique: true, required: true },
});

const drawingSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    name: { type: String, required: true },
    filePath: { type: String, required: true },
});

const User = mongoose.model('User', userSchema);
const Drawing = mongoose.model('Drawing', drawingSchema);

const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir);
}

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadsDir);
    },
    filename: (req, file, cb) => {
        cb(null, uuidv4() + '-' + file.originalname);
    },
});
const upload = multer({ storage });

app.post('/api/signup', async (req, res) => {
    const { email, password, username } = req.body;

    if (!email || !password || !username) {
        return res.status(400).send('Missing fields');
    }

    try {
        const existingUser = await User.findOne({ email });

        if (existingUser) {
            return res.status(409).send('User already exists');
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const user = new User({ email, password: hashedPassword, username });
        await user.save();

        const token = jwt.sign({ userId: user._id }, JWT_SECRET);
        res.status(201).json({ token });
    } catch (error) {
        res.status(500).send('Error creating user');
    }
});

app.post('/api/signin', async (req, res) => {
    try {
        const { email, password } = req.body;

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(401).json({ message: 'Invalid email or password' });
        }

        const passwordMatch = await bcrypt.compare(password, user.password);
        if (!passwordMatch) {
            return res.status(401).json({ message: 'Invalid email or password' });
        }

        const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1h' });

        res.json({ token });
    } catch (error) {
        console.error('Error signing in:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
});

const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (token == null) return res.sendStatus(401);

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
};

app.post('/api/drawing', authenticateToken, upload.single('drawing'), async (req, res) => {
    try {
        const { name } = req.body;
        const file = req.file;
        const userId = req.user.userId;

        if (!file) {
            return res.status(400).json({ message: 'No file uploaded' });
        }

        const newDrawing = new Drawing({ 
            userId, 
            name, 
            filePath: file.filename // Use the filename generated by multer
        });
        await newDrawing.save();

        res.status(201).json({ message: 'Drawing saved successfully', filePath: file.filename });
    } catch (error) {
        console.error('Error saving drawing:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
});

app.get('/api/drawings', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.userId;
        const drawings = await Drawing.find({ userId });
        const drawingsWithUrls = drawings.map(drawing => ({
            ...drawing.toObject(),
            url: `${req.protocol}://${req.get('host')}/uploads/${path.basename(drawing.filePath)}`
        }));
        res.json(drawingsWithUrls);
    } catch (error) {
        console.error('Error fetching drawings:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
});

app.use('/uploads', express.static(uploadsDir));

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
